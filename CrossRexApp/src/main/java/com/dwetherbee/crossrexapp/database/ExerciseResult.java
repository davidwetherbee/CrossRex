package com.dwetherbee.crossrexapp.database;

import com.dwetherbee.crossrexapp.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table EXERCISE_RESULT.
 */
public class ExerciseResult {

    private Long id;
    private Integer amount;
    private Long exerciseResultId;
    private Long exerciseWorkoutId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExerciseResultDao myDao;

    private UserWorkout userWorkout;
    private Long userWorkout__resolvedKey;

    private ExerciseWorkout exercise;
    private Long exercise__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ExerciseResult() {
    }

    public ExerciseResult(Long id) {
        this.id = id;
    }

    public ExerciseResult(Long id, Integer amount, Long exerciseResultId, Long exerciseWorkoutId) {
        this.id = id;
        this.amount = amount;
        this.exerciseResultId = exerciseResultId;
        this.exerciseWorkoutId = exerciseWorkoutId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExerciseResultDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public Long getExerciseResultId() {
        return exerciseResultId;
    }

    public void setExerciseResultId(Long exerciseResultId) {
        this.exerciseResultId = exerciseResultId;
    }

    public Long getExerciseWorkoutId() {
        return exerciseWorkoutId;
    }

    public void setExerciseWorkoutId(Long exerciseWorkoutId) {
        this.exerciseWorkoutId = exerciseWorkoutId;
    }

    /** To-one relationship, resolved on first access. */
    public UserWorkout getUserWorkout() {
        Long __key = this.exerciseResultId;
        if (userWorkout__resolvedKey == null || !userWorkout__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserWorkoutDao targetDao = daoSession.getUserWorkoutDao();
            UserWorkout userWorkoutNew = targetDao.load(__key);
            synchronized (this) {
                userWorkout = userWorkoutNew;
            	userWorkout__resolvedKey = __key;
            }
        }
        return userWorkout;
    }

    public void setUserWorkout(UserWorkout userWorkout) {
        synchronized (this) {
            this.userWorkout = userWorkout;
            exerciseResultId = userWorkout == null ? null : userWorkout.getId();
            userWorkout__resolvedKey = exerciseResultId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ExerciseWorkout getExercise() {
        Long __key = this.exerciseWorkoutId;
        if (exercise__resolvedKey == null || !exercise__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExerciseWorkoutDao targetDao = daoSession.getExerciseWorkoutDao();
            ExerciseWorkout exerciseNew = targetDao.load(__key);
            synchronized (this) {
                exercise = exerciseNew;
            	exercise__resolvedKey = __key;
            }
        }
        return exercise;
    }

    public void setExercise(ExerciseWorkout exercise) {
        synchronized (this) {
            this.exercise = exercise;
            exerciseWorkoutId = exercise == null ? null : exercise.getId();
            exercise__resolvedKey = exerciseWorkoutId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
