package com.dwetherbee.crossrexapp.database;

import java.util.List;
import com.dwetherbee.crossrexapp.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table EXERCISE_WORKOUT.
 */
public class ExerciseWorkout {

    private Long id;
    private Integer amount;
    private Integer duration;
    private Integer weight;
    private Integer sets;
    private Integer difficulty;
    private Long exerciseExerciseWorkoutId;
    private Long workoutExerciseWorkoutId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExerciseWorkoutDao myDao;

    private Exercise exercise;
    private Long exercise__resolvedKey;

    private Workout workout;
    private Long workout__resolvedKey;

    private List<ExerciseResult> exerciseResult;
    private List<Goal> goals;

    // KEEP FIELDS - put your custom fields here
    public static final int DIFFICULTY_EASY =  0;
    public static final int DIFFICULTY_MEDIUM =  1;
    public static final int DIFFICULTY_HARD =  2;
    public static final int DIFFICULTY_INSANE =  3;
    // KEEP FIELDS END

    public ExerciseWorkout() {
    }

    public ExerciseWorkout(Long id) {
        this.id = id;
    }

    public ExerciseWorkout(Long id, Integer amount, Integer duration, Integer weight, Integer sets, Integer difficulty, Long exerciseExerciseWorkoutId, Long workoutExerciseWorkoutId) {
        this.id = id;
        this.amount = amount;
        this.duration = duration;
        this.weight = weight;
        this.sets = sets;
        this.difficulty = difficulty;
        this.exerciseExerciseWorkoutId = exerciseExerciseWorkoutId;
        this.workoutExerciseWorkoutId = workoutExerciseWorkoutId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExerciseWorkoutDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public Integer getSets() {
        return sets;
    }

    public void setSets(Integer sets) {
        this.sets = sets;
    }

    public Integer getDifficulty() {
        return difficulty;
    }

    public void setDifficulty(Integer difficulty) {
        this.difficulty = difficulty;
    }

    public Long getExerciseExerciseWorkoutId() {
        return exerciseExerciseWorkoutId;
    }

    public void setExerciseExerciseWorkoutId(Long exerciseExerciseWorkoutId) {
        this.exerciseExerciseWorkoutId = exerciseExerciseWorkoutId;
    }

    public Long getWorkoutExerciseWorkoutId() {
        return workoutExerciseWorkoutId;
    }

    public void setWorkoutExerciseWorkoutId(Long workoutExerciseWorkoutId) {
        this.workoutExerciseWorkoutId = workoutExerciseWorkoutId;
    }

    /** To-one relationship, resolved on first access. */
    public Exercise getExercise() {
        Long __key = this.exerciseExerciseWorkoutId;
        if (exercise__resolvedKey == null || !exercise__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExerciseDao targetDao = daoSession.getExerciseDao();
            Exercise exerciseNew = targetDao.load(__key);
            synchronized (this) {
                exercise = exerciseNew;
            	exercise__resolvedKey = __key;
            }
        }
        return exercise;
    }

    public void setExercise(Exercise exercise) {
        synchronized (this) {
            this.exercise = exercise;
            exerciseExerciseWorkoutId = exercise == null ? null : exercise.getId();
            exercise__resolvedKey = exerciseExerciseWorkoutId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Workout getWorkout() {
        Long __key = this.workoutExerciseWorkoutId;
        if (workout__resolvedKey == null || !workout__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkoutDao targetDao = daoSession.getWorkoutDao();
            Workout workoutNew = targetDao.load(__key);
            synchronized (this) {
                workout = workoutNew;
            	workout__resolvedKey = __key;
            }
        }
        return workout;
    }

    public void setWorkout(Workout workout) {
        synchronized (this) {
            this.workout = workout;
            workoutExerciseWorkoutId = workout == null ? null : workout.getId();
            workout__resolvedKey = workoutExerciseWorkoutId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ExerciseResult> getExerciseResult() {
        if (exerciseResult == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExerciseResultDao targetDao = daoSession.getExerciseResultDao();
            List<ExerciseResult> exerciseResultNew = targetDao._queryExerciseWorkout_ExerciseResult(id);
            synchronized (this) {
                if(exerciseResult == null) {
                    exerciseResult = exerciseResultNew;
                }
            }
        }
        return exerciseResult;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExerciseResult() {
        exerciseResult = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Goal> getGoals() {
        if (goals == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoalDao targetDao = daoSession.getGoalDao();
            List<Goal> goalsNew = targetDao._queryExerciseWorkout_Goals(id);
            synchronized (this) {
                if(goals == null) {
                    goals = goalsNew;
                }
            }
        }
        return goals;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGoals() {
        goals = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
