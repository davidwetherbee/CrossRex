package com.dwetherbee.crossrexapp.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dwetherbee.crossrexapp.database.ExerciseWorkout;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXERCISE_WORKOUT.
*/
public class ExerciseWorkoutDao extends AbstractDao<ExerciseWorkout, Long> {

    public static final String TABLENAME = "EXERCISE_WORKOUT";

    /**
     * Properties of entity ExerciseWorkout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amount = new Property(1, Integer.class, "amount", false, "AMOUNT");
        public final static Property Duration = new Property(2, Integer.class, "duration", false, "DURATION");
        public final static Property Weight = new Property(3, Integer.class, "weight", false, "WEIGHT");
        public final static Property Sets = new Property(4, Integer.class, "sets", false, "SETS");
        public final static Property Difficulty = new Property(5, Integer.class, "difficulty", false, "DIFFICULTY");
        public final static Property ExerciseExerciseWorkoutId = new Property(6, Long.class, "exerciseExerciseWorkoutId", false, "EXERCISE_EXERCISE_WORKOUT_ID");
        public final static Property WorkoutExerciseWorkoutId = new Property(7, Long.class, "workoutExerciseWorkoutId", false, "WORKOUT_EXERCISE_WORKOUT_ID");
    };

    private DaoSession daoSession;

    private Query<ExerciseWorkout> exercise_ExerciseWorkoutsQuery;
    private Query<ExerciseWorkout> workout_ExercisesQuery;

    public ExerciseWorkoutDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseWorkoutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXERCISE_WORKOUT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AMOUNT' INTEGER," + // 1: amount
                "'DURATION' INTEGER," + // 2: duration
                "'WEIGHT' INTEGER," + // 3: weight
                "'SETS' INTEGER," + // 4: sets
                "'DIFFICULTY' INTEGER," + // 5: difficulty
                "'EXERCISE_EXERCISE_WORKOUT_ID' INTEGER," + // 6: exerciseExerciseWorkoutId
                "'WORKOUT_EXERCISE_WORKOUT_ID' INTEGER);"); // 7: workoutExerciseWorkoutId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXERCISE_WORKOUT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExerciseWorkout entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(2, amount);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(3, duration);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(4, weight);
        }
 
        Integer sets = entity.getSets();
        if (sets != null) {
            stmt.bindLong(5, sets);
        }
 
        Integer difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindLong(6, difficulty);
        }
 
        Long exerciseExerciseWorkoutId = entity.getExerciseExerciseWorkoutId();
        if (exerciseExerciseWorkoutId != null) {
            stmt.bindLong(7, exerciseExerciseWorkoutId);
        }
 
        Long workoutExerciseWorkoutId = entity.getWorkoutExerciseWorkoutId();
        if (workoutExerciseWorkoutId != null) {
            stmt.bindLong(8, workoutExerciseWorkoutId);
        }
    }

    @Override
    protected void attachEntity(ExerciseWorkout entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExerciseWorkout readEntity(Cursor cursor, int offset) {
        ExerciseWorkout entity = new ExerciseWorkout( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // amount
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sets
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // difficulty
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // exerciseExerciseWorkoutId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // workoutExerciseWorkoutId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExerciseWorkout entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSets(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDifficulty(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setExerciseExerciseWorkoutId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setWorkoutExerciseWorkoutId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExerciseWorkout entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExerciseWorkout entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "exerciseWorkouts" to-many relationship of Exercise. */
    public List<ExerciseWorkout> _queryExercise_ExerciseWorkouts(Long exerciseExerciseWorkoutId) {
        synchronized (this) {
            if (exercise_ExerciseWorkoutsQuery == null) {
                QueryBuilder<ExerciseWorkout> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExerciseExerciseWorkoutId.eq(null));
                exercise_ExerciseWorkoutsQuery = queryBuilder.build();
            }
        }
        Query<ExerciseWorkout> query = exercise_ExerciseWorkoutsQuery.forCurrentThread();
        query.setParameter(0, exerciseExerciseWorkoutId);
        return query.list();
    }

    /** Internal query to resolve the "exercises" to-many relationship of Workout. */
    public List<ExerciseWorkout> _queryWorkout_Exercises(Long workoutExerciseWorkoutId) {
        synchronized (this) {
            if (workout_ExercisesQuery == null) {
                QueryBuilder<ExerciseWorkout> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WorkoutExerciseWorkoutId.eq(null));
                workout_ExercisesQuery = queryBuilder.build();
            }
        }
        Query<ExerciseWorkout> query = workout_ExercisesQuery.forCurrentThread();
        query.setParameter(0, workoutExerciseWorkoutId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getExerciseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getWorkoutDao().getAllColumns());
            builder.append(" FROM EXERCISE_WORKOUT T");
            builder.append(" LEFT JOIN EXERCISE T0 ON T.'EXERCISE_EXERCISE_WORKOUT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN WORKOUT T1 ON T.'WORKOUT_EXERCISE_WORKOUT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExerciseWorkout loadCurrentDeep(Cursor cursor, boolean lock) {
        ExerciseWorkout entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Exercise exercise = loadCurrentOther(daoSession.getExerciseDao(), cursor, offset);
        entity.setExercise(exercise);
        offset += daoSession.getExerciseDao().getAllColumns().length;

        Workout workout = loadCurrentOther(daoSession.getWorkoutDao(), cursor, offset);
        entity.setWorkout(workout);

        return entity;    
    }

    public ExerciseWorkout loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExerciseWorkout> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExerciseWorkout> list = new ArrayList<ExerciseWorkout>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExerciseWorkout> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExerciseWorkout> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
