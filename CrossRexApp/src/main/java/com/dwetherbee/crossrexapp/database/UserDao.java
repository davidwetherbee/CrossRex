package com.dwetherbee.crossrexapp.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dwetherbee.crossrexapp.database.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FName = new Property(1, String.class, "fName", false, "F_NAME");
        public final static Property LName = new Property(2, String.class, "lName", false, "L_NAME");
        public final static Property Weight = new Property(3, Integer.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(4, Integer.class, "height", false, "HEIGHT");
        public final static Property BodyFat = new Property(5, Integer.class, "bodyFat", false, "BODY_FAT");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'F_NAME' TEXT," + // 1: fName
                "'L_NAME' TEXT," + // 2: lName
                "'WEIGHT' INTEGER," + // 3: weight
                "'HEIGHT' INTEGER," + // 4: height
                "'BODY_FAT' INTEGER," + // 5: bodyFat
                "'TYPE' INTEGER);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fName = entity.getFName();
        if (fName != null) {
            stmt.bindString(2, fName);
        }
 
        String lName = entity.getLName();
        if (lName != null) {
            stmt.bindString(3, lName);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(4, weight);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(5, height);
        }
 
        Integer bodyFat = entity.getBodyFat();
        if (bodyFat != null) {
            stmt.bindLong(6, bodyFat);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // height
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // bodyFat
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHeight(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBodyFat(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
