package com.dwetherbee.crossrexapp.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dwetherbee.crossrexapp.database.UserWorkout;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_WORKOUT.
*/
public class UserWorkoutDao extends AbstractDao<UserWorkout, Long> {

    public static final String TABLENAME = "USER_WORKOUT";

    /**
     * Properties of entity UserWorkout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Notes = new Property(2, String.class, "notes", false, "NOTES");
        public final static Property Intensity = new Property(3, Integer.class, "intensity", false, "INTENSITY");
        public final static Property CaloriesBurned = new Property(4, Integer.class, "caloriesBurned", false, "CALORIES_BURNED");
        public final static Property PercentComplete = new Property(5, Integer.class, "percentComplete", false, "PERCENT_COMPLETE");
        public final static Property WorkoutId = new Property(6, Long.class, "workoutId", false, "WORKOUT_ID");
        public final static Property UserId = new Property(7, Long.class, "userId", false, "USER_ID");
        public final static Property UserWorkoutId = new Property(8, Long.class, "userWorkoutId", false, "USER_WORKOUT_ID");
    };

    private DaoSession daoSession;

    private Query<UserWorkout> workout_UserWorkoutsQuery;
    private Query<UserWorkout> user_WorkoutsQuery;
    private Query<UserWorkout> workoutSchedule_UserWorkoutsQuery;

    public UserWorkoutDao(DaoConfig config) {
        super(config);
    }
    
    public UserWorkoutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_WORKOUT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'NOTES' TEXT," + // 2: notes
                "'INTENSITY' INTEGER," + // 3: intensity
                "'CALORIES_BURNED' INTEGER," + // 4: caloriesBurned
                "'PERCENT_COMPLETE' INTEGER," + // 5: percentComplete
                "'WORKOUT_ID' INTEGER," + // 6: workoutId
                "'USER_ID' INTEGER," + // 7: userId
                "'USER_WORKOUT_ID' INTEGER);"); // 8: userWorkoutId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_WORKOUT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserWorkout entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(3, notes);
        }
 
        Integer intensity = entity.getIntensity();
        if (intensity != null) {
            stmt.bindLong(4, intensity);
        }
 
        Integer caloriesBurned = entity.getCaloriesBurned();
        if (caloriesBurned != null) {
            stmt.bindLong(5, caloriesBurned);
        }
 
        Integer percentComplete = entity.getPercentComplete();
        if (percentComplete != null) {
            stmt.bindLong(6, percentComplete);
        }
 
        Long workoutId = entity.getWorkoutId();
        if (workoutId != null) {
            stmt.bindLong(7, workoutId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(8, userId);
        }
 
        Long userWorkoutId = entity.getUserWorkoutId();
        if (userWorkoutId != null) {
            stmt.bindLong(9, userWorkoutId);
        }
    }

    @Override
    protected void attachEntity(UserWorkout entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserWorkout readEntity(Cursor cursor, int offset) {
        UserWorkout entity = new UserWorkout( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notes
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // intensity
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // caloriesBurned
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // percentComplete
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // workoutId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // userId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // userWorkoutId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserWorkout entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setNotes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntensity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCaloriesBurned(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPercentComplete(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWorkoutId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUserWorkoutId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserWorkout entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserWorkout entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userWorkouts" to-many relationship of Workout. */
    public List<UserWorkout> _queryWorkout_UserWorkouts(Long workoutId) {
        synchronized (this) {
            if (workout_UserWorkoutsQuery == null) {
                QueryBuilder<UserWorkout> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WorkoutId.eq(null));
                workout_UserWorkoutsQuery = queryBuilder.build();
            }
        }
        Query<UserWorkout> query = workout_UserWorkoutsQuery.forCurrentThread();
        query.setParameter(0, workoutId);
        return query.list();
    }

    /** Internal query to resolve the "workouts" to-many relationship of User. */
    public List<UserWorkout> _queryUser_Workouts(Long userId) {
        synchronized (this) {
            if (user_WorkoutsQuery == null) {
                QueryBuilder<UserWorkout> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_WorkoutsQuery = queryBuilder.build();
            }
        }
        Query<UserWorkout> query = user_WorkoutsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "userWorkouts" to-many relationship of WorkoutSchedule. */
    public List<UserWorkout> _queryWorkoutSchedule_UserWorkouts(Long userWorkoutId) {
        synchronized (this) {
            if (workoutSchedule_UserWorkoutsQuery == null) {
                QueryBuilder<UserWorkout> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserWorkoutId.eq(null));
                workoutSchedule_UserWorkoutsQuery = queryBuilder.build();
            }
        }
        Query<UserWorkout> query = workoutSchedule_UserWorkoutsQuery.forCurrentThread();
        query.setParameter(0, userWorkoutId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkoutDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getWorkoutScheduleDao().getAllColumns());
            builder.append(" FROM USER_WORKOUT T");
            builder.append(" LEFT JOIN WORKOUT T0 ON T.'WORKOUT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'USER_ID'=T1.'_id'");
            builder.append(" LEFT JOIN WORKOUT_SCHEDULE T2 ON T.'USER_WORKOUT_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UserWorkout loadCurrentDeep(Cursor cursor, boolean lock) {
        UserWorkout entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Workout workout = loadCurrentOther(daoSession.getWorkoutDao(), cursor, offset);
        entity.setWorkout(workout);
        offset += daoSession.getWorkoutDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        WorkoutSchedule scheduledWorkout = loadCurrentOther(daoSession.getWorkoutScheduleDao(), cursor, offset);
        entity.setScheduledWorkout(scheduledWorkout);

        return entity;    
    }

    public UserWorkout loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UserWorkout> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UserWorkout> list = new ArrayList<UserWorkout>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UserWorkout> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UserWorkout> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
