package com.dwetherbee.crossrexapp.database;

import java.util.List;
import com.dwetherbee.crossrexapp.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table WORKOUT_SCHEDULE.
 */
public class WorkoutSchedule {

    private Long id;
    private String location;
    private java.util.Date date;
    private Long userId;
    private Long workoutId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkoutScheduleDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Workout workout;
    private Long workout__resolvedKey;

    private List<UserWorkout> userWorkouts;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public WorkoutSchedule() {
    }

    public WorkoutSchedule(Long id) {
        this.id = id;
    }

    public WorkoutSchedule(Long id, String location, java.util.Date date, Long userId, Long workoutId) {
        this.id = id;
        this.location = location;
        this.date = date;
        this.userId = userId;
        this.workoutId = workoutId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkoutScheduleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getWorkoutId() {
        return workoutId;
    }

    public void setWorkoutId(Long workoutId) {
        this.workoutId = workoutId;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Workout getWorkout() {
        Long __key = this.workoutId;
        if (workout__resolvedKey == null || !workout__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkoutDao targetDao = daoSession.getWorkoutDao();
            Workout workoutNew = targetDao.load(__key);
            synchronized (this) {
                workout = workoutNew;
            	workout__resolvedKey = __key;
            }
        }
        return workout;
    }

    public void setWorkout(Workout workout) {
        synchronized (this) {
            this.workout = workout;
            workoutId = workout == null ? null : workout.getId();
            workout__resolvedKey = workoutId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UserWorkout> getUserWorkouts() {
        if (userWorkouts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserWorkoutDao targetDao = daoSession.getUserWorkoutDao();
            List<UserWorkout> userWorkoutsNew = targetDao._queryWorkoutSchedule_UserWorkouts(id);
            synchronized (this) {
                if(userWorkouts == null) {
                    userWorkouts = userWorkoutsNew;
                }
            }
        }
        return userWorkouts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserWorkouts() {
        userWorkouts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
